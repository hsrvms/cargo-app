package components

import (
	"go-starter/internal/modules/shipments/dto"
	"sort"
)

templ ShipmentDetails(d dto.ShipmentDetailsResponse) {
	<div class="space-y-4">
		<!-- Shipment Basic Info -->
		<div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4">
			<h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center">
				<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
				</svg>
				Shipment Information
			</h2>
			<div class="grid grid-cols-2 gap-4">
				<div>
					<label class="text-sm font-medium text-gray-600 dark:text-gray-400">Number</label>
					<p class="text-sm font-mono bg-gray-50 dark:bg-gray-700 px-2 py-1 rounded text-gray-900 dark:text-white">{ d.ShipmentNumber }</p>
				</div>
				<div>
					<label class="text-sm font-medium text-gray-600 dark:text-gray-400">Type</label>
					<p class="text-sm text-gray-900 dark:text-white">
						if d.ShipmentType != "" {
							{ d.ShipmentType }
						} else {
							<span class="text-gray-500 dark:text-gray-400">Not specified</span>
						}
					</p>
				</div>
				<div>
					<label class="text-sm font-medium text-gray-600 dark:text-gray-400">Status</label>
					<p class="text-sm font-semibold text-blue-600 dark:text-blue-400">{ d.ShippingStatus }</p>
				</div>
				<div>
					<label class="text-sm font-medium text-gray-600 dark:text-gray-400">Sealine</label>
					<p class="text-sm text-gray-900 dark:text-white">{ d.SealineName }</p>
				</div>
				<div class="col-span-2">
					<label class="text-sm font-medium text-gray-600 dark:text-gray-400">Last Updated</label>
					<p class="text-sm text-gray-900 dark:text-white">{ d.UpdatedAt.Format("2006-01-02 15:04") }</p>
				</div>
			</div>
		</div>
		<!-- User Information -->
		<div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4">
			<h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center">
				<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
				</svg>
				Delivery Information
			</h2>
			<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
				<div>
					<label class="text-sm font-medium text-gray-600 dark:text-gray-400">Consignee</label>
					<p class="text-sm text-gray-900 dark:text-white">
						if d.Consignee != "" {
							{ d.Consignee }
						} else {
							<span class="text-gray-500 dark:text-gray-400">Not specified</span>
						}
					</p>
				</div>
				<div>
					<label class="text-sm font-medium text-gray-600 dark:text-gray-400">Recipient</label>
					<p class="text-sm text-gray-900 dark:text-white">
						if d.Recipient != "" {
							{ d.Recipient }
						} else {
							<span class="text-gray-500 dark:text-gray-400">Not specified</span>
						}
					</p>
				</div>
				<div>
					<label class="text-sm font-medium text-gray-600 dark:text-gray-400">Assigned To</label>
					<p class="text-sm text-gray-900 dark:text-white">
						if d.AssignedTo != "" {
							{ d.AssignedTo }
						} else {
							<span class="text-gray-500 dark:text-gray-400">Not assigned</span>
						}
					</p>
				</div>
				<div>
					<label class="text-sm font-medium text-gray-600 dark:text-gray-400">Shipper</label>
					<p class="text-sm text-gray-900 dark:text-white">
						if d.Shipper != "" {
							{ d.Shipper }
						} else {
							<span class="text-gray-500 dark:text-gray-400">Not specified</span>
						}
					</p>
				</div>
				<div>
					<label class="text-sm font-medium text-gray-600 dark:text-gray-400">Place of Loading</label>
					<p class="text-sm text-gray-900 dark:text-white">
						if d.PlaceOfLoading != "" {
							{ d.PlaceOfLoading }
						} else {
							<span class="text-gray-500 dark:text-gray-400">Not specified</span>
						}
					</p>
				</div>
				<div>
					<label class="text-sm font-medium text-gray-600 dark:text-gray-400">Place of Delivery</label>
					<p class="text-sm text-gray-900 dark:text-white">
						if d.PlaceOfDelivery != "" {
							{ d.PlaceOfDelivery }
						} else {
							<span class="text-gray-500 dark:text-gray-400">Not specified</span>
						}
					</p>
				</div>
				<div>
					<label class="text-sm font-medium text-gray-600 dark:text-gray-400">Final Destination</label>
					<p class="text-sm text-gray-900 dark:text-white">
						if d.FinalDestination != "" {
							{ d.FinalDestination }
						} else {
							<span class="text-gray-500 dark:text-gray-400">Not specified</span>
						}
					</p>
				</div>
				<div>
					<label class="text-sm font-medium text-gray-600 dark:text-gray-400">Container Type</label>
					<p class="text-sm text-gray-900 dark:text-white">
						if d.ContainerType != "" {
							{ d.ContainerType }
						} else {
							<span class="text-gray-500 dark:text-gray-400">Not specified</span>
						}
					</p>
				</div>
				<div>
					<label class="text-sm font-medium text-gray-600 dark:text-gray-400">Invoice Amount</label>
					<p class="text-sm text-gray-900 dark:text-white">
						if d.InvoiceAmount != "" {
							{ d.InvoiceAmount }
						} else {
							<span class="text-gray-500 dark:text-gray-400">Not specified</span>
						}
					</p>
				</div>
				<div>
					<label class="text-sm font-medium text-gray-600 dark:text-gray-400">Cost</label>
					<p class="text-sm text-gray-900 dark:text-white">
						if d.Cost != "" {
							{ d.Cost }
						} else {
							<span class="text-gray-500 dark:text-gray-400">Not specified</span>
						}
					</p>
				</div>
				<div>
					<label class="text-sm font-medium text-gray-600 dark:text-gray-400">Customs</label>
					<p class="text-sm text-gray-900 dark:text-white">
						if d.Customs != "" {
							{ d.Customs }
						} else {
							<span class="text-gray-500 dark:text-gray-400">Not specified</span>
						}
					</p>
				</div>
				<div>
					<label class="text-sm font-medium text-gray-600 dark:text-gray-400">MBL</label>
					<p class="text-sm text-gray-900 dark:text-white">
						if d.MBL != "" {
							{ d.MBL }
						} else {
							<span class="text-gray-500 dark:text-gray-400">Not specified</span>
						}
					</p>
				</div>
			</div>
			<!-- Boolean Status Fields -->
			<div class="mt-6">
				<h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-3">Status</h3>
				<div class="grid grid-cols-1 md:grid-cols-3 gap-4">
					<div class="flex items-center space-x-2">
						<div class={ "w-3 h-3 rounded-full", templ.KV("bg-green-500", d.CustomsProcessed), templ.KV("bg-gray-300 dark:bg-gray-600", !d.CustomsProcessed) }></div>
						<label class="text-sm font-medium text-gray-600 dark:text-gray-400">Customs Processed</label>
					</div>
					<div class="flex items-center space-x-2">
						<div class={ "w-3 h-3 rounded-full", templ.KV("bg-green-500", d.Invoiced), templ.KV("bg-gray-300 dark:bg-gray-600", !d.Invoiced) }></div>
						<label class="text-sm font-medium text-gray-600 dark:text-gray-400">Invoiced</label>
					</div>
					<div class="flex items-center space-x-2">
						<div class={ "w-3 h-3 rounded-full", templ.KV("bg-green-500", d.PaymentReceived), templ.KV("bg-gray-300 dark:bg-gray-600", !d.PaymentReceived) }></div>
						<label class="text-sm font-medium text-gray-600 dark:text-gray-400">Payment Received</label>
					</div>
				</div>
			</div>
			<!-- Notes Section -->
			if d.Notes != "" {
				<div class="mt-6">
					<h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-3">Notes</h3>
					<div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-4">
						<p class="text-sm text-gray-900 dark:text-white whitespace-pre-wrap">{ d.Notes }</p>
					</div>
				</div>
			}
		</div>
		<!-- Route Information -->
		<div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4">
			<h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center">
				<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-1.447-.894L15 4m0 13V4m0 0L9 7"></path>
				</svg>
				Route Information
			</h2>
			<div class="space-y-3">
				if d.Route.Prepol != nil {
					<div class="flex items-center p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
						<div class="w-12 h-8 bg-blue-100 dark:bg-blue-800 rounded flex items-center justify-center mr-3">
							<span class="text-xs font-bold text-blue-700 dark:text-blue-300">PRE</span>
						</div>
						<div class="flex-1">
							<p class="text-sm font-medium text-gray-900 dark:text-white">{ d.Route.Prepol.Location.Name }</p>
							<p class="text-xs text-gray-600 dark:text-gray-400">Pre-POL</p>
						</div>
						<div class="text-right">
							if d.Route.Prepol.Date != nil {
								<p class="text-sm text-gray-700 dark:text-gray-300">{ d.Route.Prepol.Date.Format("Jan 02, 2006") }</p>
							} else {
								<p class="text-sm text-gray-500 dark:text-gray-400">To Be Determined</p>
							}
							if d.Route.Prepol.Actual != nil && *d.Route.Prepol.Actual {
								<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100 mt-1">
									<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
										<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
									</svg>
									Actual
								</span>
							}
							if d.Route.Prepol.Actual == nil || !*d.Route.Prepol.Actual {
								<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300 mt-1">
									<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
									</svg>
									ETA
								</span>
							}
						</div>
					</div>
				}
				if d.Route.Pol != nil {
					<div class="flex items-center p-3 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800">
						<div class="w-12 h-8 bg-green-100 dark:bg-green-800 rounded flex items-center justify-center mr-3">
							<span class="text-xs font-bold text-green-700 dark:text-green-300">POL</span>
						</div>
						<div class="flex-1">
							<p class="text-sm font-medium text-gray-900 dark:text-white">{ d.Route.Pol.Location.Name }</p>
							<p class="text-xs text-gray-600 dark:text-gray-400">Port of Loading</p>
						</div>
						<div class="text-right">
							if d.Route.Pol.Date != nil {
								<p class="text-sm text-gray-700 dark:text-gray-300">{ d.Route.Pol.Date.Format("Jan 02, 2006") }</p>
							} else {
								<p class="text-sm text-gray-500 dark:text-gray-400">To Be Determined</p>
							}
							if d.Route.Pol.Actual != nil && *d.Route.Pol.Actual {
								<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100 mt-1">
									<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
										<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
									</svg>
									Actual
								</span>
							}
							if d.Route.Pol.Actual == nil || !*d.Route.Pol.Actual {
								<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300 mt-1">
									<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
									</svg>
									ETA
								</span>
							}
						</div>
					</div>
				}
				if d.Route.Pod != nil {
					<div class="flex items-center p-3 bg-orange-50 dark:bg-orange-900/20 rounded-lg border border-orange-200 dark:border-orange-800">
						<div class="w-12 h-8 bg-orange-100 dark:bg-orange-800 rounded flex items-center justify-center mr-3">
							<span class="text-xs font-bold text-orange-700 dark:text-orange-300">POD</span>
						</div>
						<div class="flex-1">
							<p class="text-sm font-medium text-gray-900 dark:text-white">{ d.Route.Pod.Location.Name }</p>
							<p class="text-xs text-gray-600 dark:text-gray-400">Port of Discharge</p>
						</div>
						<div class="text-right">
							if d.Route.Pod.Date != nil {
								<p class="text-sm text-gray-700 dark:text-gray-300">{ d.Route.Pod.Date.Format("Jan 02, 2006") }</p>
							} else {
								<p class="text-sm text-gray-500 dark:text-gray-400">To Be Determined</p>
							}
							if d.Route.Pod.Actual != nil && *d.Route.Pod.Actual {
								<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100 mt-1">
									<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
										<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
									</svg>
									Actual
								</span>
							}
							if d.Route.Pod.Actual == nil || !*d.Route.Pod.Actual {
								<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300 mt-1">
									<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
									</svg>
									ETA
								</span>
							}
						</div>
					</div>
				}
				if d.Route.Postpod != nil {
					<div class="flex items-center p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg border border-purple-200 dark:border-purple-800">
						<div class="w-12 h-8 bg-purple-100 dark:bg-purple-800 rounded flex items-center justify-center mr-3">
							<span class="text-xs font-bold text-purple-700 dark:text-purple-300">POST</span>
						</div>
						<div class="flex-1">
							<p class="text-sm font-medium text-gray-900 dark:text-white">{ d.Route.Postpod.Location.Name }</p>
							<p class="text-xs text-gray-600 dark:text-gray-400">Post-POD</p>
						</div>
						<div class="text-right">
							if d.Route.Postpod.Date != nil {
								<p class="text-sm text-gray-700 dark:text-gray-300">{ d.Route.Postpod.Date.Format("Jan 02, 2006") }</p>
							} else {
								<p class="text-sm text-gray-500 dark:text-gray-400">To Be Determined</p>
							}
							if d.Route.Postpod.Actual != nil && *d.Route.Postpod.Actual {
								<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100 mt-1">
									<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
										<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
									</svg>
									Actual
								</span>
							}
							if d.Route.Postpod.Actual == nil || !*d.Route.Postpod.Actual {
								<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300 mt-1">
									<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
									</svg>
									ETA
								</span>
							}
						</div>
					</div>
				}
				if d.Route.Prepol == nil && d.Route.Pol == nil && d.Route.Pod == nil && d.Route.Postpod == nil {
					<div class="text-center py-6">
						<svg class="w-12 h-12 text-gray-400 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-1.447-.894L15 4m0 13V4m0 0L9 7"></path>
						</svg>
						<p class="text-gray-500 dark:text-gray-400">No route information available</p>
					</div>
				}
			</div>
		</div>
		<!-- Container Information -->
		<div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4">
			<h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center">
				<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
				</svg>
				Containers
			</h2>
			if len(d.Containers) == 0 {
				<div class="text-center py-6">
					<svg class="w-12 h-12 text-gray-400 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
					</svg>
					<p class="text-gray-500 dark:text-gray-400">No containers available</p>
				</div>
			}
			for _, c := range d.Containers {
				<div class="mb-4 last:mb-0 bg-gray-50 dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600 overflow-hidden">
					<div class="bg-gray-100 dark:bg-gray-600 px-4 py-3 border-b border-gray-200 dark:border-gray-600">
						<div class="flex items-center justify-between">
							<div class="flex items-center">
								<svg class="w-4 h-4 mr-2 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
								</svg>
								<span class="font-medium text-gray-900 dark:text-white">{ c.Number }</span>
							</div>
							<div class="text-right">
								<span class="text-sm text-gray-600 dark:text-gray-400">{ c.IsoCode }</span>
								<span class="ml-2 inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-100">
									{ c.Status }
								</span>
							</div>
						</div>
					</div>
					<div class="p-4">
						<h4 class="font-medium text-sm text-gray-900 dark:text-white mb-4 flex items-center">
							<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
							</svg>
							Event Timeline
						</h4>
						if len(c.Events) == 0 {
							<div class="text-center py-4">
								<svg class="w-8 h-8 text-gray-400 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
								</svg>
								<p class="text-gray-500 dark:text-gray-400 text-sm">No events available</p>
							</div>
						}
						if len(c.Events) > 0 {
							{{
								sortedEvents := make([]dto.ShipmentContainerEventResponse, len(c.Events))
								copy(sortedEvents, c.Events)
								sort.Slice(sortedEvents, func(i, j int) bool {
									// First sort by date
									if !sortedEvents[i].Date.Equal(sortedEvents[j].Date) {
										return sortedEvents[i].Date.Before(sortedEvents[j].Date)
									}
									// If dates are equal, prioritize actual events over estimated
									return sortedEvents[i].IsActual && !sortedEvents[j].IsActual
								})
							}}
							<div class="relative pl-6 mt-3">
								for _, e := range sortedEvents {
									<div class="relative mb-4 last:mb-0">
										<!-- Timeline line -->
										if e.IsActual {
											<div class="absolute left-0 top-0 w-0.5 h-full bg-green-400 dark:bg-green-500"></div>
											<div class="absolute left-0 top-2 w-3 h-3 bg-green-500 dark:bg-green-400 rounded-full border-2 border-white dark:border-gray-800 shadow-sm -ml-1"></div>
										}
										if !e.IsActual {
											<div class="absolute left-0 top-0 w-0.5 h-full bg-gray-300 dark:bg-gray-600"></div>
											<div class="absolute left-0 top-2 w-3 h-3 bg-gray-400 dark:bg-gray-500 rounded-full border-2 border-white dark:border-gray-800 shadow-sm -ml-1"></div>
										}
										<!-- Event content -->
										<div class="ml-6 pb-4">
											<div class="bg-white dark:bg-gray-600 rounded-lg p-3 shadow-sm border border-gray-200 dark:border-gray-600">
												<div class="flex items-start justify-between">
													<div class="flex-1">
														<h5 class="font-medium text-gray-900 dark:text-white text-sm">
															<svg class="w-3 h-3 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
																<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
																<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
															</svg>
															if e.Facility != nil {
																{ e.Facility.Name }, { e.Location.Country }
															} else {
																{ e.Location.Name }, { e.Location.Country }
															}
														</h5>
														<p class="text-xs text-gray-600 dark:text-gray-300 mt-1">
															{ e.Description }
														</p>
													</div>
													<div class="text-right ml-3">
														<p class="text-xs font-medium text-gray-700 dark:text-gray-200">
															{ e.Date.Format("Jan 02, 2006") }
														</p>
														<p class="text-xs text-gray-500 dark:text-gray-400">
															{ e.Date.Format("15:04") }
														</p>
														if e.IsActual {
															<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100 mt-1">
																<svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
																	<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
																</svg>
																Actual
															</span>
														}
														if !e.IsActual {
															<span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300 mt-1">
																<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
																	<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
																</svg>
																ETA
															</span>
														}
													</div>
												</div>
											</div>
										</div>
									</div>
								}
							</div>
						}
					</div>
				</div>
			}
		</div>
	</div>
}
