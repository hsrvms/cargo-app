
package views

templ ShipmentPage() {
	<!DOCTYPE html>
	<html
		lang="en"
		x-data="{
			sidebarOpen: false,
			sidebarCollapsed: false,
			theme: localStorage.theme || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light')
		}"
		:class="{ 'dark': theme === 'dark' }"
		x-init="$watch('theme', value => localStorage.theme = value)"
	>
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>Shipment Management</title>
			<script src="https://cdn.tailwindcss.com"></script>
			<script src="/assets/js/htmx.min.js" defer></script>
			<script src="/assets/js/htmx-ext-response-targets.js" defer></script>
			<script src="https://cdn.jsdelivr.net/npm/ag-grid-community/dist/ag-grid-community.min.js"></script>
			<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
			<script>
				tailwind.config = {
					darkMode: 'class',
					theme: {
						extend: {
							colors: {
								primary: '#3B82F6',
								secondary: '#6B7280'
							}
						}
					}
				}
			</script>
			<style>
				.ag-theme-alpine {
					--ag-background-color: rgb(255, 255, 255);
					--ag-header-background-color: rgb(249, 250, 251);
					--ag-odd-row-background-color: rgb(249, 250, 251);
					--ag-border-color: rgb(229, 231, 235);
				}
				.dark .ag-theme-alpine {
					--ag-background-color: rgb(17, 24, 39);
					--ag-header-background-color: rgb(31, 41, 55);
					--ag-odd-row-background-color: rgb(31, 41, 55);
					--ag-border-color: rgb(55, 65, 81);
					--ag-foreground-color: rgb(243, 244, 246);
					--ag-secondary-foreground-color: rgb(156, 163, 175);
				}
			</style>
		</head>
		<body class="min-h-screen bg-gray-50 dark:bg-gray-900">
			<div class="container mx-auto px-4 py-8">
				<!-- Header -->
				<div class="mb-8">
					<h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">Shipment Management</h1>
					<p class="text-gray-600 dark:text-gray-400">Manage and track your shipments</p>
				</div>

				<!-- Add Shipment Form -->
				<div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-8">
					<h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Add New Shipment</h2>

					<form
						hx-post="/api/shipments"
						hx-target="#form-messages"
						hx-on::after-request="if(event.detail.successful) { this.reset(); gridApi.refreshServerSide(); }"
						class="space-y-4"
						x-data="{ loading: false }"
						@htmx:before-request="loading = true"
						@htmx:after-request="loading = false"
					>
						<div class="grid grid-cols-1 md:grid-cols-3 gap-4">
							<!-- Shipment Number -->
							<div>
								<label for="shipment_number" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
									Shipment Number <span class="text-red-500">*</span>
								</label>
								<input
									type="text"
									id="shipment_number"
									name="shipment_number"
									required
									placeholder="Enter shipment number"
									class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent dark:bg-gray-700 dark:text-white"
								/>
							</div>

							<!-- Shipment Type -->
							<div>
								<label for="shipment_type" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
									Shipment Type <span class="text-red-500">*</span>
								</label>
								<select
									id="shipment_type"
									name="shipment_type"
									required
									class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent dark:bg-gray-700 dark:text-white"
								>
									<option value="">Select type</option>
									<option value="CT">Container (CT)</option>
									<option value="BL">Bill of Lading (BL)</option>
									<option value="BK">Booking (BK)</option>
								</select>
							</div>

							<!-- Sealine Code -->
							<div>
								<label for="sealine_code" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
									Sealine Code <span class="text-red-500">*</span>
								</label>
								<input
									type="text"
									id="sealine_code"
									name="sealine_code"
									required
									placeholder="4-letter SCAC code"
									maxlength="4"
									pattern="[A-Za-z]{4}"
									class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent dark:bg-gray-700 dark:text-white"
								/>
							</div>
						</div>

						<!-- Submit Button -->
						<div class="flex justify-end">
							<button
								type="submit"
								:disabled="loading"
								class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary disabled:opacity-50 disabled:cursor-not-allowed"
							>
								<span x-show="!loading">Add Shipment</span>
								<span x-show="loading" class="flex items-center">
									<svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
										<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
										<path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
									</svg>
									Adding...
								</span>
							</button>
						</div>

						<!-- Form Messages -->
						<div id="form-messages"></div>
					</form>
				</div>

				<!-- Main Content Area -->
				<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
					<!-- Shipments Table -->
					<div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
						<div class="flex justify-between items-center mb-4">
							<h2 class="text-xl font-semibold text-gray-900 dark:text-white">Shipments</h2>
							<div class="flex space-x-2">
								<button
									onclick="refreshGrid()"
									class="inline-flex items-center px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
								>
									<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
									</svg>
									Refresh
								</button>
								<button
									onclick="deleteSelectedShipments()"
									class="inline-flex items-center px-3 py-2 border border-red-300 dark:border-red-600 rounded-md text-sm font-medium text-red-700 dark:text-red-400 bg-white dark:bg-gray-700 hover:bg-red-50 dark:hover:bg-red-900 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
								>
									<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
									</svg>
									Delete Selected
								</button>
							</div>
						</div>

						<!-- ag-Grid Container -->
						<div id="myGrid" class="ag-theme-alpine w-full" style="height: 400px;"></div>
					</div>

					<!-- Map Placeholder -->
					<div class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
						<h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-4">Vessel Map</h2>
						<div class="bg-gray-100 dark:bg-gray-700 rounded-lg h-96 flex items-center justify-center">
							<div class="text-center">
								<svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-1.447-.894L15 4m0 13V4m-6 3l6-3"></path>
								</svg>
								<p class="text-gray-500 dark:text-gray-400">Map view coming soon</p>
								<p class="text-sm text-gray-400 dark:text-gray-500 mt-2">Vessel locations and routes will be displayed here</p>
							</div>
						</div>
					</div>
				</div>
			</div>

			<!-- ag-Grid Setup Script -->
			<script>
				let gridApi;
				let selectedRows = [];

				// Column definitions
				const columnDefs = [
					{
						field: 'select',
						headerName: '',
						checkboxSelection: true,
						headerCheckboxSelection: true,
						width: 50,
						pinned: 'left'
					},
					{
						field: 'shipment_number',
						headerName: 'Shipment Number',
						sortable: true,
						filter: 'agTextColumnFilter',
						width: 150
					},
					{
						field: 'shipment_type',
						headerName: 'Type',
						sortable: true,
						filter: 'agSetColumnFilter',
						width: 80
					},
					{
						field: 'sealine_code',
						headerName: 'Sealine',
						sortable: true,
						filter: 'agTextColumnFilter',
						width: 100
					},
					{
						field: 'sealine_name',
						headerName: 'Sealine Name',
						sortable: true,
						filter: 'agTextColumnFilter',
						width: 150
					},
					{
						field: 'shipping_status',
						headerName: 'Status',
						sortable: true,
						filter: 'agSetColumnFilter',
						width: 120,
						cellRenderer: function(params) {
							const status = params.value || 'Unknown';
							const statusClasses = {
								'In Transit': 'bg-blue-100 text-blue-800',
								'Delivered': 'bg-green-100 text-green-800',
								'Delayed': 'bg-yellow-100 text-yellow-800',
								'Unknown': 'bg-gray-100 text-gray-800'
							};
							const classes = statusClasses[status] || statusClasses['Unknown'];
							return `<span class="px-2 py-1 text-xs font-semibold rounded-full ${classes}">${status}</span>`;
						}
					},
					{
						field: 'created_at',
						headerName: 'Created',
						sortable: true,
						filter: 'agDateColumnFilter',
						width: 120,
						cellRenderer: function(params) {
							return new Date(params.value).toLocaleDateString();
						}
					},
					{
						field: 'actions',
						headerName: 'Actions',
						width: 100,
						pinned: 'right',
						cellRenderer: function(params) {
							return `
								<div class="flex space-x-2">
									<button
										onclick="refreshShipment('${params.data.id}')"
										class="text-blue-600 hover:text-blue-900 text-sm"
										title="Refresh"
									>
										<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
										</svg>
									</button>
									<button
										onclick="deleteShipment('${params.data.id}')"
										class="text-red-600 hover:text-red-900 text-sm"
										title="Delete"
									>
										<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
										</svg>
									</button>
								</div>
							`;
						}
					}
				];

				// Grid options
				const gridOptions = {
					columnDefs: columnDefs,
					defaultColDef: {
						resizable: true,
						sortable: true,
						filter: true
					},
					rowSelection: 'multiple',
					suppressRowClickSelection: true,
					onSelectionChanged: onSelectionChanged,
					pagination: true,
					paginationPageSize: 20,
					rowModelType: 'serverSide'
				};

				// Initialize the grid when the page loads
				document.addEventListener('DOMContentLoaded', function() {
					const gridDiv = document.querySelector('#myGrid');
					gridApi = agGrid.createGrid(gridDiv, gridOptions);

					// Set up server-side row model
					const datasource = {
						getRows: function(params) {
							fetch('/api/shipments/grid-data', {
								method: 'POST',
								headers: {
									'Content-Type': 'application/json',
								},
								body: JSON.stringify({
									startRow: params.startRow,
									endRow: params.endRow,
									sortModel: params.sortModel,
									filterModel: params.filterModel
								})
							})
							.then(response => response.json())
							.then(data => {
								params.success({
									rowData: data.rows,
									rowCount: data.lastRow
								});
							})
							.catch(error => {
								console.error('Error fetching data:', error);
								params.fail();
							});
						}
					};

					gridApi.setGridOption('serverSideDatasource', datasource);
				});

				// Selection changed handler
				function onSelectionChanged() {
					selectedRows = gridApi.getSelectedRows();
				}

				// Refresh grid data
				function refreshGrid() {
					gridApi.refreshServerSide();
				}

				// Refresh individual shipment
				function refreshShipment(shipmentId) {
					fetch(`/api/shipments/${shipmentId}/refresh`, {
						method: 'GET'
					})
					.then(response => response.json())
					.then(data => {
						if (data.message === 'success') {
							gridApi.refreshServerSide();
							showMessage('Shipment refreshed successfully', 'success');
						} else {
							showMessage('Failed to refresh shipment', 'error');
						}
					})
					.catch(error => {
						console.error('Error refreshing shipment:', error);
						showMessage('Failed to refresh shipment', 'error');
					});
				}

				// Delete individual shipment
				function deleteShipment(shipmentId) {
					if (confirm('Are you sure you want to delete this shipment?')) {
						fetch(`/api/shipments/${shipmentId}`, {
							method: 'DELETE'
						})
						.then(response => response.json())
						.then(data => {
							if (data.message === 'success') {
								gridApi.refreshServerSide();
								showMessage('Shipment deleted successfully', 'success');
							} else {
								showMessage('Failed to delete shipment', 'error');
							}
						})
						.catch(error => {
							console.error('Error deleting shipment:', error);
							showMessage('Failed to delete shipment', 'error');
						});
					}
				}

				// Delete selected shipments
				function deleteSelectedShipments() {
					if (selectedRows.length === 0) {
						showMessage('Please select shipments to delete', 'warning');
						return;
					}

					if (confirm(`Are you sure you want to delete ${selectedRows.length} shipment(s)?`)) {
						const shipmentIds = selectedRows.map(row => row.id);

						fetch('/api/shipments/bulk-delete', {
							method: 'DELETE',
							headers: {
								'Content-Type': 'application/json',
							},
							body: JSON.stringify({ shipment_ids: shipmentIds })
						})
						.then(response => response.json())
						.then(data => {
							if (data.message === 'success') {
								gridApi.refreshServerSide();
								showMessage(`${selectedRows.length} shipment(s) deleted successfully`, 'success');
								selectedRows = [];
							} else {
								showMessage('Failed to delete shipments', 'error');
							}
						})
						.catch(error => {
							console.error('Error deleting shipments:', error);
							showMessage('Failed to delete shipments', 'error');
						});
					}
				}

				// Show message helper
				function showMessage(message, type) {
					const messageDiv = document.getElementById('form-messages');
					const alertClasses = {
						'success': 'bg-green-100 border-green-500 text-green-700',
						'error': 'bg-red-100 border-red-500 text-red-700',
						'warning': 'bg-yellow-100 border-yellow-500 text-yellow-700'
					};

					messageDiv.innerHTML = `
						<div class="border-l-4 p-4 mt-4 ${alertClasses[type] || alertClasses['error']}">
							<p>${message}</p>
						</div>
					`;

					// Auto-hide success messages
					if (type === 'success') {
						setTimeout(() => {
							messageDiv.innerHTML = '';
						}, 3000);
					}
				}

				// HTMX event handlers
				document.body.addEventListener('htmx:afterRequest', function(event) {
					const response = event.detail.xhr.response;
					let data;

					try {
						data = JSON.parse(response);
					} catch (e) {
						data = { error: 'Invalid response' };
					}

					if (event.detail.successful) {
						showMessage(data.message || 'Operation successful', 'success');
					} else {
						showMessage(data.error || 'Operation failed', 'error');
					}
				});
			</script>
		</body>
	</html>
}
